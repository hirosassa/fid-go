package main

import (
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

const SMALL_BLOCK_SIZE = 64
const LARGE_BLOCK_SIZE = 1024
const MAX_CODE_WIDTH = 48

// Generate all the combinatorials comb(i, j) where 0 <= i, j <=SMALL_BLOCK_SIZE
func calcCombinationTable() [][]uint64 {
	combinationTable := make([][]uint64, SMALL_BLOCK_SIZE+1)
	for i := uint8(0); i <= SMALL_BLOCK_SIZE; i++ {
		combinations := make([]uint64, SMALL_BLOCK_SIZE+1)
		combinations[0] = uint64(1)
		for j := uint8(1); j <= i; j++ {
			combinations[j] = combinationTable[i-1][j-1] + combinationTable[i-1][j]
		}
		combinationTable[i] = combinations
	}
	return combinationTable
}

// Generate code width for each
func calcCodeSizeTable(combinationTable [][]uint64) []uint8 {
	codeSizeTable := make([]uint8, SMALL_BLOCK_SIZE+1)
	codeSizeTable[0] = 0
	for i := 1; i < SMALL_BLOCK_SIZE; i++ {
		size := log2(combinationTable[SMALL_BLOCK_SIZE][i]-1) + 1
		if size > MAX_CODE_WIDTH {
			size = SMALL_BLOCK_SIZE
		}
		codeSizeTable[i] = size
	}
	return codeSizeTable
}

func log2(val uint64) uint8 {
	return uint8(math.Ceil(math.Log2(float64(val)))) - 1
}

func main() {
	file, err := os.Create("../const.go")
	if err != nil {
		os.Exit(1)
	}
	defer file.Close()

	// header
	_, _ = fmt.Fprint(file, "//This file is generated by build.go. DO NOT EDIT.\npackage fid\n\n")

	// constants
	_, _ = fmt.Fprintf(file, "const SMALL_BLOCK_SIZE = %d\nconst LARGE_BLOCK_SIZE = %d\nconst MAX_CODE_WIDTH = %d\n\n", SMALL_BLOCK_SIZE, LARGE_BLOCK_SIZE, MAX_CODE_WIDTH)

	// combination table
	combinationTable := calcCombinationTable()
	_, _ = fmt.Fprint(file, "var combinationTable = [][]uint64 {\n")
	for _, raw := range combinationTable {
		rawArray := make([]string, len(raw))
		for i, elem := range raw {
			rawArray[i] = strconv.Itoa(int(elem))
		}
		rawString := "\t{" + strings.Join(rawArray, ", ") + "},\n"
		_, _ = fmt.Fprint(file, rawString)
	}
	_, _ = fmt.Fprint(file, "}\n")

	// code size
	codeWidthTable := calcCodeSizeTable(combinationTable)
	_, _ = fmt.Fprint(file, "var codeWidthTable = []uint8 {\n")
	rawArray := make([]string, SMALL_BLOCK_SIZE+1)
	for i, raw := range codeWidthTable {
		rawArray[i] = strconv.Itoa(int(raw))
	}
	rawString := "\t" + strings.Join(rawArray, ", ")
	_, _ = fmt.Fprint(file, rawString)
	_, _ = fmt.Fprint(file, "}")
}
